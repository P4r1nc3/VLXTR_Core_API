name: Deploy VLXTR Core to EC2

on:
  push:
    branches:
      - master

env:
  APP_NAME: vlxtr-core
  EC2_HOST: 54.93.165.149
  EC2_USER: ec2-user
  GOOGLE_CREDENTIALS_FILE_NAME: allegro-service-account.json

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Configure Maven GitHub Packages access
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml <<EOL
          <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd">
            <servers>
              <server>
                <id>github</id>
                <username>${{ github.actor }}</username>
                <password>${{ github.token }}</password>
              </server>
            </servers>
          </settings>
          EOL

      - name: Decode and add Google credentials to resources
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.GOOGLE_CREDENTIALS_JSON }}" | base64 --decode > src/main/resources/${{ env.GOOGLE_CREDENTIALS_FILE_NAME }}

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: application
          path: target/*.jar

  deploy:
    name: Deploy to EC2
    needs: [build]
    runs-on: ubuntu-latest

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: application

      - name: List files
        run: ls -la

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ env.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Stop existing service
        run: |
          ssh ${{ env.EC2_USER }}@${{ env.EC2_HOST }} "sudo systemctl stop $APP_NAME || true"

      - name: Deploy JAR file
        run: |
          JAR_FILE=$(find . -name "*.jar" -type f | head -n 1)
          echo "Deploying $JAR_FILE to EC2"
          scp "$JAR_FILE" ${{ env.EC2_USER }}@${{ env.EC2_HOST }}:/home/${{ env.EC2_USER }}/$APP_NAME.jar

      - name: Create .env on EC2
        run: |
          ssh ${{ env.EC2_USER }}@${{ env.EC2_HOST }} "cat > /home/${{ env.EC2_USER }}/.env.$APP_NAME << EOL
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}
          DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
          GOOGLE_CREDENTIALS_FILE_NAME=$GOOGLE_CREDENTIALS_FILE_NAME
          GOOGLE_FOLDER_ID=${{ secrets.GOOGLE_FOLDER_ID }}
          EOL"
          ssh ${{ env.EC2_USER }}@${{ env.EC2_HOST }} "chmod 600 /home/${{ env.EC2_USER }}/.env.$APP_NAME"

      - name: Configure systemd service
        run: |
          ssh ${{ env.EC2_USER }}@${{ env.EC2_HOST }} "cat > /tmp/$APP_NAME.service << EOL
          [Unit]
          Description=VLXTR Core Service
          After=network.target

          [Service]
          User=${{ env.EC2_USER }}
          WorkingDirectory=/home/${{ env.EC2_USER }}
          ExecStart=/usr/bin/java -Xms64m -Xmx256m -jar /home/${{ env.EC2_USER }}/$APP_NAME.jar
          EnvironmentFile=/home/${{ env.EC2_USER }}/.env.$APP_NAME
          Restart=always
          SuccessExitStatus=143

          [Install]
          WantedBy=multi-user.target
          EOL"

          ssh ${{ env.EC2_USER }}@${{ env.EC2_HOST }} "sudo mv /tmp/$APP_NAME.service /etc/systemd/system/"
          ssh ${{ env.EC2_USER }}@${{ env.EC2_HOST }} "sudo systemctl daemon-reload"

      - name: Start service
        run: |
          ssh ${{ env.EC2_USER }}@${{ env.EC2_HOST }} "sudo systemctl enable $APP_NAME"
          ssh ${{ env.EC2_USER }}@${{ env.EC2_HOST }} "sudo systemctl start $APP_NAME"

      - name: Cleanup SSH
        run: rm -f ~/.ssh/id_rsa
